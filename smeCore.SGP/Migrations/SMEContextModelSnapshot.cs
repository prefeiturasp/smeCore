// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using smeCore.SGP.Contexts;

namespace smeCore.SGP.Migrations
{
    [DbContext(typeof(SMEContext))]
    partial class SMEContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("smeCore.Models.Academic.AnnualPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DescriptionB1");

                    b.Property<string>("DescriptionB2");

                    b.Property<string>("DescriptionB3");

                    b.Property<string>("DescriptionB4");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("PlanningId");

                    b.Property<string>("SelectedLearningObjectivesB1");

                    b.Property<string>("SelectedLearningObjectivesB2");

                    b.Property<string>("SelectedLearningObjectivesB3");

                    b.Property<string>("SelectedLearningObjectivesB4");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.ToTable("AnnualPlans");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassAbsence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeEol");

                    b.Property<DateTime>("Date");

                    b.Property<string>("StudentClassId");

                    b.Property<string>("StudentCodeId");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.HasIndex("StudentCodeId");

                    b.ToTable("ClassAbsences");

                    b.HasData(
                        new
                        {
                            Id = "43476b04-19f7-44d4-9d13-33228ed655f2",
                            CodeEol = "10",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 476, DateTimeKind.Local).AddTicks(2346)
                        },
                        new
                        {
                            Id = "4f7f3bb3-ffb5-40d0-8c69-48502073c566",
                            CodeEol = "30",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(6659)
                        },
                        new
                        {
                            Id = "84147558-f861-4f9c-a010-799c27715fb4",
                            CodeEol = "30",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(6762)
                        },
                        new
                        {
                            Id = "76bb9798-30e2-455c-a92a-1bd216cf2084",
                            CodeEol = "30",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(6796)
                        },
                        new
                        {
                            Id = "bded361d-70d8-4e75-9f9b-9abec0193a6e",
                            CodeEol = "30",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(6834)
                        },
                        new
                        {
                            Id = "de745767-c6d8-4f62-aa62-cfe45f9e5460",
                            CodeEol = "30",
                            Date = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(6881)
                        });
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassMode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClassModes");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassModeCalendar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassModeId");

                    b.Property<string>("SchoolYearId");

                    b.HasKey("Id");

                    b.HasIndex("ClassModeId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("ClassModeCalendars");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassPoll", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PollPortugueseId");

                    b.HasKey("Id");

                    b.HasIndex("PollPortugueseId")
                        .IsUnique();

                    b.ToTable("ClassPolls");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassSchedule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassroomDevelopment");

                    b.Property<string>("ContinuousRecovery");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Homework");

                    b.Property<string>("LearninObjectives");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("PlanningId");

                    b.Property<int>("Quantity");

                    b.Property<string>("TagColor");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Cycle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("School");

                    b.Property<string>("SelectedKnowledgeMatrix");

                    b.Property<string>("SelectedODS");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Discipline", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Planning", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Classroom");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DisciplineId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("School");

                    b.Property<string>("SchoolClassId");

                    b.Property<string>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("smeCore.Models.Academic.PollPortuguese", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("T1E");

                    b.Property<string>("T1L");

                    b.Property<string>("T2E");

                    b.Property<string>("T2L");

                    b.Property<string>("T3E");

                    b.Property<string>("T3L");

                    b.Property<string>("T4E");

                    b.Property<string>("T4L");

                    b.HasKey("Id");

                    b.ToTable("PollPortugueses");
                });

            modelBuilder.Entity("smeCore.Models.Academic.RegionalBoardEducation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RegionalBoardEducations");
                });

            modelBuilder.Entity("smeCore.Models.Academic.School", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("RegionalBoardEducationId");

                    b.Property<int>("SchoolType");

                    b.HasKey("Id");

                    b.HasIndex("RegionalBoardEducationId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolCalendar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SchoolId");

                    b.Property<string>("SchoolYearId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("SchoolCalendars");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassModeId");

                    b.Property<string>("Classroom");

                    b.Property<int>("OfferedSeats");

                    b.Property<string>("SchoolId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ClassModeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolTerm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClosureEnd");

                    b.Property<DateTime>("ClosureStart");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ReportCardConsolidation");

                    b.Property<string>("SchoolYearId");

                    b.Property<DateTime>("ValidityEnd");

                    b.Property<DateTime>("ValidityStart");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("SchoolTerms");

                    b.HasData(
                        new
                        {
                            Id = "2a397bc0-2190-4c8f-b59f-cad4240f05db",
                            ClosureEnd = new DateTime(2019, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClosureStart = new DateTime(2019, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "1° Bimestre de 2019",
                            ReportCardConsolidation = new DateTime(2019, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolYearId = "e17d4088-a785-41f8-9bfe-add46bd5c1e8",
                            ValidityEnd = new DateTime(2019, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidityStart = new DateTime(2019, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "3948459f-3a00-4b0c-bdc7-a6839ee62774",
                            ClosureEnd = new DateTime(2019, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClosureStart = new DateTime(2019, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2° Bimestre de 2019",
                            ReportCardConsolidation = new DateTime(2019, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolYearId = "e17d4088-a785-41f8-9bfe-add46bd5c1e8",
                            ValidityEnd = new DateTime(2019, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidityStart = new DateTime(2019, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "10e58731-9bcb-4ff5-bf61-2fcfbcd8c988",
                            ClosureEnd = new DateTime(2019, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClosureStart = new DateTime(2019, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3° Bimestre de 2019",
                            ReportCardConsolidation = new DateTime(2019, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolYearId = "e17d4088-a785-41f8-9bfe-add46bd5c1e8",
                            ValidityEnd = new DateTime(2019, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidityStart = new DateTime(2019, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "1d3df0aa-e3dc-460f-87af-592bdb69b1a2",
                            ClosureEnd = new DateTime(2019, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ClosureStart = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "4° Bimestre de 2019",
                            ReportCardConsolidation = new DateTime(2019, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SchoolYearId = "e17d4088-a785-41f8-9bfe-add46bd5c1e8",
                            ValidityEnd = new DateTime(2019, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValidityStart = new DateTime(2019, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");

                    b.HasData(
                        new
                        {
                            Id = "e17d4088-a785-41f8-9bfe-add46bd5c1e8",
                            Name = "Ensino Regular",
                            Year = 2019
                        });
                });

            modelBuilder.Entity("smeCore.Models.Academic.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = "34f816f6-23f4-4103-ac71-b4443257be94"
                        },
                        new
                        {
                            Id = "1f8cf3d7-4791-43be-a675-bc7abbb61e5d"
                        },
                        new
                        {
                            Id = "bafed596-dcd6-47d5-92ac-9211ad006119"
                        },
                        new
                        {
                            Id = "6397f044-b07b-4709-bd6b-06e918c19813"
                        },
                        new
                        {
                            Id = "453eb516-4efb-4432-aafa-76ebc357fdb1"
                        },
                        new
                        {
                            Id = "5416dc1f-7251-4c37-bf13-9c4f2f3e4e9d"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Academic.StudentClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PlanningId");

                    b.Property<string>("PollsId");

                    b.Property<string>("SchoolClassId");

                    b.Property<string>("StudentId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.HasIndex("PollsId")
                        .IsUnique();

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.AccessPermission", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Location");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccessPermission");

                    b.HasData(
                        new
                        {
                            Id = "6f84a81e-2edc-4a28-b569-406f0c372263",
                            CreatedAt = new DateTime(2019, 4, 25, 16, 57, 54, 480, DateTimeKind.Local).AddTicks(9533),
                            Location = "/Admin",
                            ModifiedAt = new DateTime(2019, 4, 25, 16, 57, 54, 481, DateTimeKind.Local).AddTicks(619),
                            Name = "Área Administrativa"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Authentication.AccessPermissionRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessPermissionId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("AccessPermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccessPermissionRole");

                    b.HasData(
                        new
                        {
                            Id = "ca2afbd4-9d6a-49e4-81f1-6a05908648f7",
                            AccessPermissionId = "6f84a81e-2edc-4a28-b569-406f0c372263",
                            RoleId = "de2c5278-52fc-45d3-9a8a-9158afab8671"
                        },
                        new
                        {
                            Id = "470e6e7c-5608-491e-8f1a-e1450c512af2",
                            AccessPermissionId = "6f84a81e-2edc-4a28-b569-406f0c372263",
                            RoleId = "cca0a8d9-3d32-48af-bb38-5daa928d188b"
                        },
                        new
                        {
                            Id = "627fa964-a82b-4a5c-8474-33a2285b9587",
                            AccessPermissionId = "6f84a81e-2edc-4a28-b569-406f0c372263",
                            RoleId = "fddf23db-ab6b-481e-b501-129ed93f582f"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Authentication.LoggedUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresAt");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("LoggedUsers");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "de2c5278-52fc-45d3-9a8a-9158afab8671",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "cca0a8d9-3d32-48af-bb38-5daa928d188b",
                            Name = "Diretor"
                        },
                        new
                        {
                            Id = "fddf23db-ab6b-481e-b501-129ed93f582f",
                            Name = "Professor"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("smeCore.Models.Entity.Profile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("smeCore.Models.Organization.Code", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Codes");

                    b.HasData(
                        new
                        {
                            Id = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            Name = "Código EOL"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Organization.StudentCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeId");

                    b.Property<string>("StudentId");

                    b.Property<DateTime>("Validity");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCodes");

                    b.HasData(
                        new
                        {
                            Id = "41b121b9-ab56-4cdb-b073-21279eba911a",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "34f816f6-23f4-4103-ac71-b4443257be94",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "10"
                        },
                        new
                        {
                            Id = "5cfab658-1faa-4e52-a7cf-d9b4e66d0d09",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "1f8cf3d7-4791-43be-a675-bc7abbb61e5d",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "20"
                        },
                        new
                        {
                            Id = "baf64de7-d726-48f7-8d4e-0a83bc2dca04",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "bafed596-dcd6-47d5-92ac-9211ad006119",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "30"
                        },
                        new
                        {
                            Id = "a009a3cd-b72a-4e50-8541-0148cd8806e9",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "6397f044-b07b-4709-bd6b-06e918c19813",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "40"
                        },
                        new
                        {
                            Id = "c70216d0-c19a-4147-9430-93e0b122eea3",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "453eb516-4efb-4432-aafa-76ebc357fdb1",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "50"
                        },
                        new
                        {
                            Id = "2129e985-a350-4cee-b358-1021014681e3",
                            CodeId = "6e1768df-3592-4e1c-8a84-1b7824bde8d4",
                            StudentId = "5416dc1f-7251-4c37-bf13-9c4f2f3e4e9d",
                            Validity = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            Value = "60"
                        });
                });

            modelBuilder.Entity("smeCore.Models.Organization.UserCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeId");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCodes");
                });

            modelBuilder.Entity("smeCore.Models.Academic.AnnualPlan", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithOne("AnnualPlan")
                        .HasForeignKey("smeCore.Models.Academic.AnnualPlan", "PlanningId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassAbsence", b =>
                {
                    b.HasOne("smeCore.Models.Academic.StudentClass", "StudentClass")
                        .WithMany("Absences")
                        .HasForeignKey("StudentClassId");

                    b.HasOne("smeCore.Models.Organization.StudentCode", "StudentCode")
                        .WithMany("Absence")
                        .HasForeignKey("StudentCodeId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassModeCalendar", b =>
                {
                    b.HasOne("smeCore.Models.Academic.ClassMode", "ClassMode")
                        .WithMany("SpecialCalendars")
                        .HasForeignKey("ClassModeId");

                    b.HasOne("smeCore.Models.Academic.SchoolYear", "SchoolYear")
                        .WithMany("ClassModeCalendars")
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassPoll", b =>
                {
                    b.HasOne("smeCore.Models.Academic.PollPortuguese", "PollPortuguese")
                        .WithOne("ClassPoll")
                        .HasForeignKey("smeCore.Models.Academic.ClassPoll", "PollPortugueseId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassSchedule", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("PlanningId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Planning", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Discipline", "Discipline")
                        .WithMany("Plannings")
                        .HasForeignKey("DisciplineId");

                    b.HasOne("smeCore.Models.Academic.SchoolClass", "SchoolClass")
                        .WithMany("Plannings")
                        .HasForeignKey("SchoolClassId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.School", b =>
                {
                    b.HasOne("smeCore.Models.Academic.RegionalBoardEducation", "RegionalBoardEducation")
                        .WithMany("Schools")
                        .HasForeignKey("RegionalBoardEducationId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolCalendar", b =>
                {
                    b.HasOne("smeCore.Models.Academic.School", "School")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("SchoolId");

                    b.HasOne("smeCore.Models.Academic.SchoolYear", "SchoolYear")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolClass", b =>
                {
                    b.HasOne("smeCore.Models.Academic.ClassMode", "ClassMode")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("ClassModeId");

                    b.HasOne("smeCore.Models.Academic.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolTerm", b =>
                {
                    b.HasOne("smeCore.Models.Academic.SchoolYear", "SchoolYear")
                        .WithMany("SchoolTerms")
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Student", b =>
                {
                    b.HasOne("smeCore.Models.Entity.Profile", "Profile")
                        .WithOne("Student")
                        .HasForeignKey("smeCore.Models.Academic.Student", "ProfileId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.StudentClass", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithMany("StudentClasses")
                        .HasForeignKey("PlanningId");

                    b.HasOne("smeCore.Models.Academic.ClassPoll", "Polls")
                        .WithOne("StudentClass")
                        .HasForeignKey("smeCore.Models.Academic.StudentClass", "PollsId");

                    b.HasOne("smeCore.Models.Academic.SchoolClass", "SchoolClass")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SchoolClassId");

                    b.HasOne("smeCore.Models.Academic.Student", "Student")
                        .WithMany("Classes")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.AccessPermissionRole", b =>
                {
                    b.HasOne("smeCore.Models.Authentication.AccessPermission", "AccessPermission")
                        .WithMany("AccessPermissionRoles")
                        .HasForeignKey("AccessPermissionId");

                    b.HasOne("smeCore.Models.Authentication.Role", "Role")
                        .WithMany("AccessPermissionRoles")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.UserRole", b =>
                {
                    b.HasOne("smeCore.Models.Authentication.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("smeCore.Models.Entity.Profile", b =>
                {
                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("smeCore.Models.Entity.Profile", "UserId");
                });

            modelBuilder.Entity("smeCore.Models.Organization.StudentCode", b =>
                {
                    b.HasOne("smeCore.Models.Organization.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId");

                    b.HasOne("smeCore.Models.Academic.Student", "Student")
                        .WithMany("Codes")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("smeCore.Models.Organization.UserCode", b =>
                {
                    b.HasOne("smeCore.Models.Organization.Code", "Code")
                        .WithMany("UserCodes")
                        .HasForeignKey("CodeId");

                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithMany("Codes")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}

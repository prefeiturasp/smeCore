// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using smeCore.SGP.Contexts;

namespace smeCore.SGP.Migrations
{
    [DbContext(typeof(SMEContext))]
    [Migration("20190307150701_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("smeCore.Models.Academic.AnnualPlan", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DescriptionB1");

                    b.Property<string>("DescriptionB2");

                    b.Property<string>("DescriptionB3");

                    b.Property<string>("DescriptionB4");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("PlanningId");

                    b.Property<string>("SelectedLearningObjectivesB1");

                    b.Property<string>("SelectedLearningObjectivesB2");

                    b.Property<string>("SelectedLearningObjectivesB3");

                    b.Property<string>("SelectedLearningObjectivesB4");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId")
                        .IsUnique();

                    b.ToTable("AnnualPlans");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassAbsence", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("StudentClassId");

                    b.HasKey("Id");

                    b.HasIndex("StudentClassId");

                    b.ToTable("ClassAbsences");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassMode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ClassModes");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassModeCalendar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassModeId");

                    b.Property<string>("SchoolYearId");

                    b.HasKey("Id");

                    b.HasIndex("ClassModeId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("ClassModeCalendars");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassSchedule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassroomDevelopment");

                    b.Property<string>("ContinuousRecovery");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Homework");

                    b.Property<string>("LearninObjectives");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("PlanningId");

                    b.Property<string>("TagColor");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.ToTable("ClassSchedules");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Cycle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("ModifiedBy");

                    b.Property<string>("School");

                    b.Property<string>("SelectedKnowledgeMatrix");

                    b.Property<string>("SelectedODS");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Discipline", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Planning", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Classroom");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DisciplineId");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("School");

                    b.Property<string>("SchoolClassId");

                    b.Property<string>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("SchoolClassId");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("smeCore.Models.Academic.RegionalBoardEducation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Acronym");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RegionalBoardEducations");
                });

            modelBuilder.Entity("smeCore.Models.Academic.School", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("RegionalBoardEducationId");

                    b.Property<int>("SchoolType");

                    b.HasKey("Id");

                    b.HasIndex("RegionalBoardEducationId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolCalendar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SchoolId");

                    b.Property<string>("SchoolYearId");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("SchoolCalendars");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClassModeId");

                    b.Property<string>("Classroom");

                    b.Property<int>("OfferedSeats");

                    b.Property<string>("SchoolId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ClassModeId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolClasses");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolYear", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Bimester1ClosureEnd");

                    b.Property<DateTime>("Bimester1ClosureStart");

                    b.Property<DateTime>("Bimester1ValidityEnd");

                    b.Property<DateTime>("Bimester1ValidityStart");

                    b.Property<DateTime>("Bimester2ClosureEnd");

                    b.Property<DateTime>("Bimester2ClosureStart");

                    b.Property<DateTime>("Bimester2ValidityEnd");

                    b.Property<DateTime>("Bimester2ValidityStart");

                    b.Property<DateTime>("Bimester3ClosureEnd");

                    b.Property<DateTime>("Bimester3ClosureStart");

                    b.Property<DateTime>("Bimester3ValidityEnd");

                    b.Property<DateTime>("Bimester3ValidityStart");

                    b.Property<DateTime>("Bimester4ClosureEnd");

                    b.Property<DateTime>("Bimester4ClosureStart");

                    b.Property<DateTime>("Bimester4ValidityEnd");

                    b.Property<DateTime>("Bimester4ValidityStart");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ReportCardConsolidation");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Student", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ProfileId");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("smeCore.Models.Academic.StudentClass", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PlanningId");

                    b.Property<string>("SchoolClassId");

                    b.Property<string>("StudentId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("PlanningId");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.LoggedUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresAt");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("RefreshToken");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("LoggedUsers");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.UserRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("smeCore.Models.Entity.Profile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("smeCore.Models.Organization.Code", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("smeCore.Models.Organization.StudentCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeId");

                    b.Property<string>("StudentId");

                    b.Property<DateTime>("Validity");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCodes");
                });

            modelBuilder.Entity("smeCore.Models.Organization.UserCode", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeId");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCodes");
                });

            modelBuilder.Entity("smeCore.Models.Academic.AnnualPlan", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithOne("AnnualPlan")
                        .HasForeignKey("smeCore.Models.Academic.AnnualPlan", "PlanningId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassAbsence", b =>
                {
                    b.HasOne("smeCore.Models.Academic.StudentClass", "StudentClass")
                        .WithMany("Absences")
                        .HasForeignKey("StudentClassId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassModeCalendar", b =>
                {
                    b.HasOne("smeCore.Models.Academic.ClassMode", "ClassMode")
                        .WithMany("SpecialCalendars")
                        .HasForeignKey("ClassModeId");

                    b.HasOne("smeCore.Models.Academic.SchoolYear", "SchoolYear")
                        .WithMany("ClassModeCalendars")
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.ClassSchedule", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithMany("ClassSchedules")
                        .HasForeignKey("PlanningId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Planning", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Discipline", "Discipline")
                        .WithMany("Plannings")
                        .HasForeignKey("DisciplineId");

                    b.HasOne("smeCore.Models.Academic.SchoolClass", "SchoolClass")
                        .WithMany("Plannings")
                        .HasForeignKey("SchoolClassId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.School", b =>
                {
                    b.HasOne("smeCore.Models.Academic.RegionalBoardEducation", "RegionalBoardEducation")
                        .WithMany("Schools")
                        .HasForeignKey("RegionalBoardEducationId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolCalendar", b =>
                {
                    b.HasOne("smeCore.Models.Academic.School", "School")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("SchoolId");

                    b.HasOne("smeCore.Models.Academic.SchoolYear", "SchoolYear")
                        .WithMany("SchoolCalendars")
                        .HasForeignKey("SchoolYearId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.SchoolClass", b =>
                {
                    b.HasOne("smeCore.Models.Academic.ClassMode", "ClassMode")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("ClassModeId");

                    b.HasOne("smeCore.Models.Academic.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.Student", b =>
                {
                    b.HasOne("smeCore.Models.Entity.Profile", "Profile")
                        .WithOne("Student")
                        .HasForeignKey("smeCore.Models.Academic.Student", "ProfileId");
                });

            modelBuilder.Entity("smeCore.Models.Academic.StudentClass", b =>
                {
                    b.HasOne("smeCore.Models.Academic.Planning", "Planning")
                        .WithMany("StudentClasses")
                        .HasForeignKey("PlanningId");

                    b.HasOne("smeCore.Models.Academic.SchoolClass", "SchoolClass")
                        .WithMany("StudentClasses")
                        .HasForeignKey("SchoolClassId");

                    b.HasOne("smeCore.Models.Academic.Student", "Student")
                        .WithMany("Classes")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("smeCore.Models.Authentication.UserRole", b =>
                {
                    b.HasOne("smeCore.Models.Authentication.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("smeCore.Models.Entity.Profile", b =>
                {
                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("smeCore.Models.Entity.Profile", "UserId");
                });

            modelBuilder.Entity("smeCore.Models.Organization.StudentCode", b =>
                {
                    b.HasOne("smeCore.Models.Organization.Code", "Code")
                        .WithMany()
                        .HasForeignKey("CodeId");

                    b.HasOne("smeCore.Models.Academic.Student", "Student")
                        .WithMany("Codes")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("smeCore.Models.Organization.UserCode", b =>
                {
                    b.HasOne("smeCore.Models.Organization.Code", "Code")
                        .WithMany("UserCodes")
                        .HasForeignKey("CodeId");

                    b.HasOne("smeCore.Models.Authentication.User", "User")
                        .WithMany("Codes")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
